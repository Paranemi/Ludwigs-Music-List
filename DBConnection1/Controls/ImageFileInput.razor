@inject NavigationManager NavigationManager

<div class="validation-container">

    <TelerikUpload SaveUrl="@SaveUrl"
                   SaveField="file"
                   RemoveField="fileToRemove"
                   AllowedExtensions="@( new List<string>() { ".jpg"} )">

    </TelerikUpload>

    @if (string.IsNullOrEmpty(Value))
    {
        <div class="val-tooltip">
            <p><strong>!</strong></p>
            <span class="val-tooltiptext">@Value</span>
        </div>
    }

</div>




@code {
    [Parameter]
    public string Value { get; set; }

    // One way to define relative paths is to put the desired URL here.
    // This can be a full URL such as https://mydomain/myendpoint/save
    public string SaveUrl => ToAbsoluteUrl("api/upload/save");
    public string RemoveUrl => ToAbsoluteUrl("api/upload/remove");

    public string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }
}


@*@page "/"
    @using System.IO

    <p>
        <InputFile OnChange="LoadImage" />
        @Value
    </p>

    <img src="@imageUri" />

    @code {
        public string Value { get; set; }
        public string imageUri { get; set; }
        long maxFileSize = 1024 * 1024 * 15;
        async Task LoadImage(InputFileChangeEventArgs e)
        {
            //client side
            Value = e.File.Name;
            var imageFile = await e.File.RequestImageFileAsync("image/jpeg", 1920, 1080);
            using Stream fileStream = imageFile.OpenReadStream(maxFileSize);
            using MemoryStream ms = new();

            await fileStream.CopyToAsync(ms);

            //standard data uri
            imageUri = $"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}";

            //server
            var content = new MultipartFormDataContent
            {
                {
                    //file muss bei controller auch file heißen
                    new ByteArrayContent(ms.ToArray()),
                                "\"file\"",
                                e.File.Name
                }
            };

            var respone = await HTTP.PostAsync("/Filesave", content);

        }

    }*@