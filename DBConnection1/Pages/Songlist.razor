@page "/songlist"
@using Telerik.Blazor.Components
@using ViewModels.Contracts
@inherits SonglistBase

<TelerikGrid Resizable="true"
             Data="@songlist"
             Sortable="true"
             SortMode="@SortMode.Multiple"
             FilterMode="Telerik.Blazor.GridFilterMode.FilterMenu">
    <GridColumns>
        <GridColumn Field="@nameof(ISongViewModel.Name)" Title="Song Name" Editable="true">
            <Template>
                @{
                    var song = context as ISongViewModel;
                    <TelerikCheckBox ValueChanged="@((bool value) => ChangeHandler(value, song.Name))"></TelerikCheckBox>
                    <a href="/songdetails/@song.Album.Name/@song.Name">@song.Name</a>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="" Title="Album Name">
            <Template>
                @{
                    var album = context as ISongViewModel;
                    <span>@album.Album.Name</span>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="" Title="Artist Name">
            <Template>
                @{
                    var artist = context as ISongViewModel;
                    <a href="/artistdetails/@artist.Artist.Name">@artist.Artist.Name</a>
                }
            </Template>
        </GridColumn>
        <GridColumn>
            <Template>
                @{
                    var song = context as ISongViewModel;
                    <button @onclick="(() => DeleteSong(song.SongId))">Delete</button>
                    <button>Update</button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>
<SongListDataInput></SongListDataInput>


@{

    //delegate methode übergben
    //confirmation zurückgeben if else verzweigung
    void DeleteSong(Guid SongId)
    {
        <NotificationWindow Visible="true"></NotificationWindow>
        SongWorkflow.DeleteSongById(SongId);
        UriHelper.NavigateTo("/songlist", true);
    }
}
