@page "/songlist"
@using Telerik.Blazor.Components
@using ViewModels.Contracts
@inherits SonglistBase

<TelerikGrid Resizable="true"
             Class="no-scroll"
             Data="@songlist"
             Navigable="true"
             OnCreate="@CreateHandler"
             Sortable="true"
             Pageable="true"
             PageSize="20"
             SortMode="@SortMode.Single"
             FilterMode="Telerik.Blazor.GridFilterMode.FilterMenu">
    <GridColumns>
        <GridColumn Field="@nameof(ISongViewModel.Name)" Title="Song Name" Editable="true">
            <Template>
                @{
                    bool IsLikedbyUser = false;
                    var song = context as ISongViewModel;
                    foreach (var item in userSongs)
                    {
                        if (item.SongId == song.SongId)
                        {
                            IsLikedbyUser = true;
                            break;
                        }
                    }
                    <TelerikCheckBox Class="heart-icon k-checkbox" Value="IsLikedbyUser" ValueChanged="@((bool value) => ChangeHandler(value, song.SongId))"></TelerikCheckBox>
                    //  <TelerikCheckBox Class = "heart-icon k-checkbox" Value="IsLikedbyUser" ValueChanged="@((bool value) => ChangeHandler(value, song.SongId))"></TelerikCheckBox >
                    <a href="/songdetails/@song.Album.Name/@song.SongId">@song.Name</a>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="Album.Name" Title="Album Name">
            <Template>
                @{
                    var album = context as ISongViewModel;
                    <span class="album-text">@album.Album.Name</span>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="Artist.Name" Title="Artist Name">
            <Template>
                @{
                    var artist = context as ISongViewModel;
                    <a href="/artistdetails/@artist.Artist.ArtistId">@artist.Artist.Name</a>
                }
            </Template>
        </GridColumn>
        <GridColumn>
            <Template>
                @{
                    var song = context as ISongViewModel;
                    <button class="small-sign-button" @onclick="@(e => EditSongHandler(song.SongId))"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</button>
                    <button style="background-color:black;color:white;" class="small-sign-button" @onclick="@(e => DeleteSongHandler(song.SongId))"><span class="oi oi-trash" aria-hidden="true"></span>Delete</button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>
<SongListDataInput></SongListDataInput>
<p class="welcome-text">@test</p>

@{

    void DeleteSongHandler(Guid SongId)
    {
        SongIdToEdit = SongId;
        SongWorkflow.DeleteSongById(SongIdToEdit);
        UriHelper.NavigateTo("/songlist", true);
    }

    void EditSongHandler(Guid SongId)
    {
        Edit = true;
        SongIdToEdit = SongId;
    }
}
@if (Edit)
{
    <SongListDataInput Visible="true" SongId="SongIdToEdit"></SongListDataInput>
}

@code{
    public void CreateHandler(GridCommandEventArgs args)
    {
        test = "add song";
    }
}