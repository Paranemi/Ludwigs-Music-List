@using System.IO
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="validation-container">
    <div>
        <InputFile class="validation-input" OnChange="LoadImage" />
        @if (buttonVisible)
        {
            <button class="upload-Button" @onclick="@(() => OnClick.InvokeAsync(Value))">Use Image</button>
        }
        
    </div>
    
    @if (string.IsNullOrEmpty(Value))
    {
        <div class="val-tooltip">
            <p><strong>!</strong></p>
            <span class="val-tooltiptext">@Value</span>
        </div>
    }
</div>


@code {

    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    [Parameter]
    public string Value { get; set; }
    public bool buttonVisible { get; set; } = false;
    public string imageUri { get; set; }
    long maxFileSize = 1024 * 1024 * 15;
    async Task LoadImage(InputFileChangeEventArgs e)
    {
        //client side
        Value = e.File.Name;
        var imageFile = await e.File.RequestImageFileAsync("image/jpg", 1920, 1080);
        using Stream fileStream = imageFile.OpenReadStream(maxFileSize);
        using MemoryStream ms = new();

        await fileStream.CopyToAsync(ms);

        //standard data uri
        imageUri = $"data:image/jpg;base64,{Convert.ToBase64String(ms.ToArray())}";
        //server
        var content = new MultipartFormDataContent
    {
            {
                //file muss bei controller auch file heißen
                new ByteArrayContent(ms.ToArray()),
                            "\"file\"",
                            e.File.Name
            }
        };

        var response = Http.PostAsync(ToAbsoluteUrl("api/upload/save"), content);
        buttonVisible = true;
    }

    public string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }
}
