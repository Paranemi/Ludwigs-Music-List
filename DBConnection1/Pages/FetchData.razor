@page "/fetchdata"
@using DBConnection1.Data
@using Telerik.Blazor.Components
@using DBConnection1.Models
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<TelerikGrid Resizable="true" 
             Data="forecasts"
             Reorderable="true"

             >
    <GridColumns>
        <GridColumn Field="@nameof(WeatherForecast.Date)"></GridColumn>
        <GridColumn Title="Temp (C)" Field="@nameof(WeatherForecast.TemperatureC)"></GridColumn>
        <GridColumn Title="Temp (F)" Field="@nameof(WeatherForecast.TemperatureF)"></GridColumn>
        <GridColumn Field="@nameof(WeatherForecast.Summary)"></GridColumn>
    </GridColumns>
</TelerikGrid>

<table class="welcome-text">
    <thead>
        <tr>
            <th>Name</th>
            <th>Album</th>
            <th>Artist</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var song in songlist)
        {
        <tr>
            <td>@song.Name</td>
            <td>@song.Album.Name</td>
            <td>@song.Artist.Name</td>
        </tr>
        }
    </tbody>
</table>


@code {
    WeatherForecast[] forecasts;

    [Inject]
    public AppDataContext AppDataContext { get; set; }
    private List<Song> songlist;
    private List<Album> albumlist;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        songlist = AppDataContext.Song.ToList();
        albumlist = AppDataContext.Album.ToList();
    }
}
